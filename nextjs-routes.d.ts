// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Run `npx nextjs-routes` to regenerate this file.
/* eslint-disable */

// prettier-ignore
declare module "nextjs-routes" {
  export type Route =
    | { pathname: "/api/as-api/[...asProxy]"; query: Query<{ asProxy: string[] }> }
    | { pathname: "/api/auth/[...auth0]"; query: Query<{ auth0: string[] }> }
    | { pathname: "/api/dm-api/[...dmProxy]"; query: Query<{ dmProxy: string[] }> }
    | { pathname: "/api/viewer-proxy/[...viewerProxy]"; query: Query<{ viewerProxy: string[] }> }
    | { pathname: "/dataset/[datasetId]/[datasetVersion]"; query: Query<{ datasetId: string; datasetVersion: string }> }
    | { pathname: "/datasets"; query?: Query | undefined }
    | { pathname: "/docs/assets/job-launch"; query?: Query | undefined }
    | { pathname: "/docs/assets/jupyter-app"; query?: Query | undefined }
    | { pathname: "/docs/assets/jupyter-instance"; query?: Query | undefined }
    | { pathname: "/docs/assets/jupyter-lab"; query?: Query | undefined }
    | { pathname: "/docs/assets/jupyter-launch"; query?: Query | undefined }
    | { pathname: "/docs/assets/jupyter-launched"; query?: Query | undefined }
    | { pathname: "/docs/assets/keycloak"; query?: Query | undefined }
    | { pathname: "/docs/assets/login"; query?: Query | undefined }
    | { pathname: "/docs/assets/project-context"; query?: Query | undefined }
    | { pathname: "/docs/assets/project-create"; query?: Query | undefined }
    | { pathname: "/docs/assets/results-1"; query?: Query | undefined }
    | { pathname: "/docs/assets/results-2"; query?: Query | undefined }
    | { pathname: "/docs/concepts"; query?: Query | undefined }
    | { pathname: "/docs/developer"; query?: Query | undefined }
    | { pathname: "/docs/guided-tour"; query?: Query | undefined }
    | { pathname: "/docs/how-to/applications"; query?: Query | undefined }
    | { pathname: "/docs/how-to/context"; query?: Query | undefined }
    | { pathname: "/docs/how-to/create-project"; query?: Query | undefined }
    | { pathname: "/docs/how-to/execution"; query?: Query | undefined }
    | { pathname: "/docs/how-to/jobs"; query?: Query | undefined }
    | { pathname: "/docs/how-to/login"; query?: Query | undefined }
    | { pathname: "/docs/how-to/projects-tab"; query?: Query | undefined }
    | { pathname: "/docs/how-to/results"; query?: Query | undefined }
    | { pathname: "/docs/how-to"; query?: Query | undefined }
    | { pathname: "/docs/jobs"; query?: Query | undefined }
    | { pathname: "/executions"; query?: Query | undefined }
    | { pathname: "/"; query?: Query | undefined }
    | { pathname: "/products"; query?: Query | undefined }
    | { pathname: "/project/file"; query?: Query | undefined }
    | { pathname: "/project"; query?: Query | undefined }
    | { pathname: "/results/instance/[instanceId]"; query: Query<{ instanceId: string }> }
    | { pathname: "/results/task/[taskId]"; query: Query<{ taskId: string }> }
    | { pathname: "/results"; query?: Query | undefined };

  type Query<Params = {}> = Params & { [key: string]: string | string[] | undefined };
}

// prettier-ignore
declare module "next/link" {
  import type { Route } from "nextjs-routes";
  import type { LinkProps as NextLinkProps } from "next/dist/client/link";
  import type { PropsWithChildren, MouseEventHandler } from "react";
  export * from "next/dist/client/link";

  type RouteOrQuery = Route | { query?: { [key: string]: string | string[] | undefined } };

  export interface LinkProps extends Omit<NextLinkProps, "href"> {
    href: RouteOrQuery;
  }

  declare function Link(
    props: PropsWithChildren<LinkProps>
  ): DetailedReactHTMLElement<
    {
      onMouseEnter?: MouseEventHandler<Element> | undefined;
      onClick: MouseEventHandler;
      href?: string | undefined;
      ref?: any;
    },
    HTMLElement
  >;

  export default Link;
}

// prettier-ignore
declare module "next/router" {
  import type { Route } from "nextjs-routes";
  import type { NextRouter as Router } from "next/dist/client/router";
  export * from "next/dist/client/router";
  export { default } from "next/dist/client/router";

  type TransitionOptions = Parameters<Router["push"]>[2];

  type Pathname = Route["pathname"];

  type QueryForPathname = {
    [K in Route as K["pathname"]]: Exclude<K["query"], undefined>;
  };

  type RouteOrQuery = Route | { query: { [key: string]: string | string[] | undefined } };

  export interface NextRouter<P extends Pathname = Pathname>
    extends Omit<Router, "push" | "replace"> {
    pathname: P;
    route: P;
    query: QueryForPathname[P];
    push(
      url: RouteOrQuery,
      as?: string,
      options?: TransitionOptions
    ): Promise<boolean>;
    replace(
      url: RouteOrQuery,
      as?: string,
      options?: TransitionOptions
    ): Promise<boolean>;
  }

  export function useRouter<P extends Pathname>(): NextRouter<P>;
}
